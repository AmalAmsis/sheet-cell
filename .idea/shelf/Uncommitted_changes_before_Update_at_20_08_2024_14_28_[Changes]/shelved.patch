Index: Engine/src/Test/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Engine/src/Test/Main.java b/Engine/src/Test/Main.java
new file mode 100644
--- /dev/null	(date 1724153311699)
+++ b/Engine/src/Test/Main.java	(date 1724153311699)
@@ -0,0 +1,78 @@
+package Test;
+
+import expression.ExpressionEvaluator;
+import sheet.api.EffectiveValue;
+
+public class Main {
+    public static void main(String[] args) {
+        // Valid expressions
+        String expression1 = "{PLUS, 4, 5}";
+        EffectiveValue result1 = ExpressionEvaluator.evaluate(expression1);
+        System.out.println("Result of " + expression1 + " = " + result1.getValue());
+
+        String expression2 = "{MINUS, {PLUS, 4, 5}, {POW, 2, 3}}";
+        EffectiveValue result2 = ExpressionEvaluator.evaluate(expression2);
+        System.out.println("Result of " + expression2 + " = " + result2.getValue());
+
+        String expression3 = "TRUE";
+        EffectiveValue result3 = ExpressionEvaluator.evaluate(expression3);
+        System.out.println("Result of " + expression3 + " = " + result3.getValue());
+
+        String expression4 = "12345";
+        EffectiveValue result4 = ExpressionEvaluator.evaluate(expression4);
+        System.out.println("Result of " + expression4 + " = " + result4.getValue());
+
+        String expression5 = "{CONCAT, \"Hello \", \"World\"}";
+        EffectiveValue result5 = ExpressionEvaluator.evaluate(expression5);
+        System.out.println("Result of " + expression5 + " = " + result5.getValue());
+
+        String expression12 = "{MINUS, 100, {POW, 2, 3}}";
+        EffectiveValue result12 = ExpressionEvaluator.evaluate(expression12);
+        System.out.println("Result of " + expression12 + " = " + result12.getValue());
+
+        // Invalid expressions
+        try {
+            String expression6 = "{NON_EXISTENT_OPERATION, 4, 5}";
+            EffectiveValue result6 = ExpressionEvaluator.evaluate(expression6);
+            System.out.println("Result of " + expression6 + " = " + result6.getValue());
+        } catch (IllegalArgumentException e) {
+            System.out.println("Invalid operation caught: " + e.getMessage());
+        }
+
+        try {
+            String expression7 = "{PLUS, 4}";
+            EffectiveValue result7 = ExpressionEvaluator.evaluate(expression7);
+            System.out.println("Result of " + expression7 + " = " + result7.getValue());
+        } catch (IllegalArgumentException e) {
+            System.out.println("Invalid argument count caught: " + e.getMessage());
+        }
+
+        try {
+            String expression7 = "{PLUS, 4, 8, 16}";
+            EffectiveValue result7 = ExpressionEvaluator.evaluate(expression7);
+            System.out.println("Result of " + expression7 + " = " + result7.getValue());
+        } catch (IllegalArgumentException e) {
+            System.out.println("Invalid argument count caught: " + e.getMessage());
+        }
+
+        // Test with a string that should be interpreted as a string
+        String expression8 = "This is a test string";
+        EffectiveValue result8 = ExpressionEvaluator.evaluate(expression8);
+        System.out.println("Result of " + expression8 + " = " + result8.getValue());
+
+        // Test with a string that does not start with '{' and is not a number or boolean
+        String expression9 = "JustAnotherString";
+        EffectiveValue result9 = ExpressionEvaluator.evaluate(expression9);
+        System.out.println("Result of " + expression9 + " = " + result9.getValue());
+
+        // Test with a floating-point number
+        String expression10 = "3.14159";
+        EffectiveValue result10 = ExpressionEvaluator.evaluate(expression10);
+        System.out.println("Result of " + expression10 + " = " + result10.getValue());
+
+        // Test with a boolean false
+        String expression11 = "FALSE";
+        EffectiveValue result11 = ExpressionEvaluator.evaluate(expression11);
+        System.out.println("Result of " + expression11 + " = " + result11.getValue());
+    }
+}
